/**
 * remotecalc-rest
 * Calculadora REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Result from '../model/Result';

/**
* Operations service.
* @module api/OperationsApi
* @version 1.0.0
*/
export default class OperationsApi {

    /**
    * Constructs a new OperationsApi. 
    * @alias module:api/OperationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the div operation.
     * @callback module:api/OperationsApi~divCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} value1 
     * @param {Number} value2 
     * @param {module:api/OperationsApi~divCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Result}
     */
    div(value1, value2, callback) {
      let postBody = null;
      // verify the required parameter 'value1' is set
      if (value1 === undefined || value1 === null) {
        throw new Error("Missing the required parameter 'value1' when calling div");
      }
      // verify the required parameter 'value2' is set
      if (value2 === undefined || value2 === null) {
        throw new Error("Missing the required parameter 'value2' when calling div");
      }

      let pathParams = {
        'value1': value1,
        'value2': value2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/operation/divisao/{value1}/{value2}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOperations operation.
     * @callback module:api/OperationsApi~getOperationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all registered operations
     * @param {module:api/OperationsApi~getOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getOperations(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mult operation.
     * @callback module:api/OperationsApi~multCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} value1 
     * @param {Number} value2 
     * @param {module:api/OperationsApi~multCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Result}
     */
    mult(value1, value2, callback) {
      let postBody = null;
      // verify the required parameter 'value1' is set
      if (value1 === undefined || value1 === null) {
        throw new Error("Missing the required parameter 'value1' when calling mult");
      }
      // verify the required parameter 'value2' is set
      if (value2 === undefined || value2 === null) {
        throw new Error("Missing the required parameter 'value2' when calling mult");
      }

      let pathParams = {
        'value1': value1,
        'value2': value2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/operation/multiplicacao/{value1}/{value2}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the soma operation.
     * @callback module:api/OperationsApi~somaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} value1 
     * @param {Number} value2 
     * @param {module:api/OperationsApi~somaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Result}
     */
    soma(value1, value2, callback) {
      let postBody = null;
      // verify the required parameter 'value1' is set
      if (value1 === undefined || value1 === null) {
        throw new Error("Missing the required parameter 'value1' when calling soma");
      }
      // verify the required parameter 'value2' is set
      if (value2 === undefined || value2 === null) {
        throw new Error("Missing the required parameter 'value2' when calling soma");
      }

      let pathParams = {
        'value1': value1,
        'value2': value2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/operation/soma/{value1}/{value2}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sub operation.
     * @callback module:api/OperationsApi~subCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} value1 
     * @param {Number} value2 
     * @param {module:api/OperationsApi~subCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Result}
     */
    sub(value1, value2, callback) {
      let postBody = null;
      // verify the required parameter 'value1' is set
      if (value1 === undefined || value1 === null) {
        throw new Error("Missing the required parameter 'value1' when calling sub");
      }
      // verify the required parameter 'value2' is set
      if (value2 === undefined || value2 === null) {
        throw new Error("Missing the required parameter 'value2' when calling sub");
      }

      let pathParams = {
        'value1': value1,
        'value2': value2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/operation/subtracao/{value1}/{value2}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
